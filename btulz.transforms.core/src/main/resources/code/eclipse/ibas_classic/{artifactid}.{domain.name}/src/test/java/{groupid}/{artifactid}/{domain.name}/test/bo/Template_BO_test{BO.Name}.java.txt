package ${GroupId}.${ArtifactId}.${Domain.getName().toLowerCase()}.test.bo;

import junit.framework.TestCase;
import java.io.StringWriter;
import javax.xml.bind.*;
import org.colorcoding.ibas.bobas.data.*;
import org.colorcoding.ibas.bobas.common.*;
import org.colorcoding.ibas.bobas.repository.*;
import ${GroupId}.${ArtifactId}.${Domain.getName().toLowerCase()}.data.*;
import ${GroupId}.${ArtifactId}.${Domain.getName().toLowerCase()}.bo.${BO.getName().toLowerCase()}.*;
import ${GroupId}.${ArtifactId}.${Domain.getName().toLowerCase()}.repository.*;

/**
* ${BO.getDescription()} 测试
* 
*/
public class test${BO.getName()} extends TestCase {
    /**
     * 获取连接口令
    */
    String getToken() {
        return "";
    }
    
    /**
     * 基本项目测试
     * @throws Exception 
    */
    public void testBasicItems() throws Exception {
        ${BO.getName()} bo = new ${BO.getName()}();
        // 测试属性赋值

$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
        // 测试${BOItem.getDescription()}
        I${BOItem.getName()} ${BOItem.getName().toLowerCase()} = bo.get${BOItem.getName()}s().create();
        // 测试属性赋值
        
$END_BOITEM_RELATION_IS_ONETOMANY$

$BEGIN_BOITEM_RELATION_IS_ONETOONE$
        // 测试${BOItem.getDescription()}
        I${BOItem.getName()} ${BOItem.getName().toLowerCase()} = bo.get${BOItem.getName()}();
        // 测试属性赋值
        
$END_BOITEM_RELATION_IS_ONETOONE$
$END_BOITEM$

        // 测试序列化及反序列化
        System.out.println("序列化输出：");
        JAXBContext context = JAXBContext.newInstance(${BO.getName()}.class);
        Marshaller marshaller = context.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_ENCODING, "UTF-8");
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.setProperty(Marshaller.JAXB_FRAGMENT, false);
        StringWriter writer = new StringWriter();
        marshaller.marshal(bo, writer);
        String oldXML = writer.toString();
        System.out.println(oldXML);

        System.out.println("反序列化输出：");
        I${BO.getName()} boCloned = bo.clone();
        writer = new StringWriter();
        marshaller.marshal(boCloned, writer);
        String newXML = writer.toString();
        System.out.println(newXML);

        // assertEquals("marshal and unmarshal not equal.", oldXML, newXML);//克隆会修正值，此处不相等

        // 测试对象的保存和查询
        IOperationResult<?> operationResult = null;
        ICriteria criteria = null;
        IBORepository${Domain.getName()}App boRepository = new BORepository${Domain.getName()}();
        //设置用户口令
        boRepository.setUserToken(this.getToken());

        // 测试保存
        operationResult = boRepository.save${BO.getName()}(bo);
        assertEquals(operationResult.getMessage(), operationResult.getResultCode(), 0);
        ${BO.getName()} boSaved = (${BO.getName()})operationResult.getResultObjects().firstOrDefault();


        // 测试查询
        criteria = boSaved.getCriteria();
        criteria.setResultCount(10);
        operationResult = boRepository.fetch${BO.getName()}(criteria);
        assertEquals(operationResult.getMessage(), operationResult.getResultCode(), 0);


    }

}
